{"version":3,"sources":["component/CousreForm/Form.js","component/CourseList/List.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","addCourse","type","value","current","onChange","updateCourse","id","List","state","isEdit","renderCourse","details","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Component","App","courses","target","push","splice","cousreList","length","map","course","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAWeA,EATF,SAACC,GACV,OACI,uBAAMC,SAAUD,EAAME,UAAtB,UACI,uBAAOC,KAAK,OAAOC,MAAOJ,EAAMK,QAASC,SAAUN,EAAMO,aAAcC,GAAG,SAC1E,wBAAQL,KAAK,SAAb,4BC8CGM,E,4MAhDXC,MAAQ,CACJC,QAAQ,G,EAIZC,aAAe,WACX,OACI,+BACI,+BAAO,EAAKZ,MAAMa,QAAQC,OAC1B,wBAAQC,QAAS,WAAQ,EAAKC,eAA9B,yBACA,wBAAQD,QAAS,WAAQ,EAAKf,MAAMiB,aAAa,EAAKjB,MAAMkB,QAA5D,+B,EAMZF,YAAc,WAAO,IACXL,EAAW,EAAKD,MAAhBC,OACN,EAAKQ,SAAS,CAAER,QAASA,K,EAI7BS,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKtB,MAAMuB,WAAW,EAAKvB,MAAMkB,MAAO,EAAKM,MAAMpB,OACnD,EAAKY,e,EAITS,iBAAmB,WACf,OACI,uBAAMxB,SAAU,EAAKmB,iBAArB,UACI,uBAAOjB,KAAK,OAAOuB,IAAK,SAACC,GAAQ,EAAKH,MAAQG,GAAKC,aAAc,EAAK5B,MAAMa,QAAQC,OACpF,uD,4CAKZ,WAAU,IACAH,EAAWkB,KAAKnB,MAAhBC,OACN,OACI,cAAC,WAAD,UACMA,EAASkB,KAAKJ,mBAAqBI,KAAKjB,qB,GA5CvCkB,aCiEJC,E,4MA7DbrB,MAAQ,CACNsB,QAAS,CACP,CAAElB,KAAM,QACR,CAAEA,KAAM,OACR,CAAEA,KAAM,WAEVT,QAAS,I,EAIXE,aAAe,SAACc,GACd,EAAKF,SAAS,CACZd,QAASgB,EAAEY,OAAO7B,S,EAKtBF,UAAY,SAACmB,GAEX,GADAA,EAAEC,iBAC0B,KAAxBD,EAAEY,OAAOnB,KAAKV,MAChB,OAAO,EAEP,IAAIC,EAAU,EAAKK,MAAML,QACrB2B,EAAU,EAAKtB,MAAMsB,QACzBA,EAAQE,KAAK,CAAEpB,KAAMT,IACrB,EAAKc,SAAS,CAAEa,UAAS3B,QAAS,M,EAKtCY,aAAe,SAACC,GACd,IAAIc,EAAU,EAAKtB,MAAMsB,QACzBA,EAAQG,OAAOjB,EAAO,GACtB,EAAKC,SAAS,CAAEa,a,EAIlBT,WAAa,SAACL,EAAOd,GACnB,IAAI4B,EAAU,EAAKtB,MAAMsB,QACZA,EAAQd,GACf,KAAWd,EACjB,EAAKe,SAAS,CAAEa,a,4CAGlB,WAAU,IAAD,OACCA,EAAYH,KAAKnB,MAAjBsB,QAEFI,EADOJ,EAAQK,OACQL,EAAQM,KAAI,SAACC,EAAQrB,GAChD,OAAO,cAAC,EAAD,CAAML,QAAS0B,EAAoBrB,MAAOA,EAAOD,aAAc,EAAKA,aAAcM,WAAY,EAAKA,YAAvEL,MAC9B,yDAEP,OACE,0BAASsB,UAAU,MAAnB,UACE,4CACA,cAAC,EAAD,CAAMjC,aAAcsB,KAAKtB,aAAcL,UAAW2B,KAAK3B,UAAWG,QAASwB,KAAKnB,MAAML,UACtF,6BAAK+B,W,GAzDKN,aCQHW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef323182.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.addCourse}>\r\n            <input type=\"text\" value={props.current} onChange={props.updateCourse} id=\"name\" />\r\n            <button type=\"submit\">Add Course</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { Component, Fragment } from 'react';\r\n\r\nclass List extends Component {\r\n\r\n    state = {\r\n        isEdit: false\r\n    }\r\n\r\n    // render course\r\n    renderCourse = () => {\r\n        return (\r\n            <li>\r\n                <span>{this.props.details.name}</span>\r\n                <button onClick={() => { this.toggleState() }}>Edit Course</button>\r\n                <button onClick={() => { this.props.deleteCourse(this.props.index) }}>Delete Course</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    // Toggle State\r\n    toggleState = () => {\r\n        let { isEdit } = this.state;\r\n        this.setState({ isEdit: !isEdit })\r\n    }\r\n\r\n    // Update Course Item\r\n    updateCourseItem = (e) => {\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index, this.input.value)\r\n        this.toggleState();\r\n    }\r\n\r\n    // render update form\r\n    renderUpdateForm = () => {\r\n        return (\r\n            <form onSubmit={this.updateCourseItem}>\r\n                <input type=\"text\" ref={(v) => { this.input = v }} defaultValue={this.props.details.name} />\r\n                <button>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let { isEdit } = this.state;\r\n        return (\r\n            <Fragment>\r\n                { isEdit ? this.renderUpdateForm() : this.renderCourse()}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from \"react\";\nimport Form from './component/CousreForm/Form';\nimport List from './component/CourseList/List';\n\nclass App extends Component {\n\n  state = {\n    courses: [\n      { name: 'HTML' },\n      { name: 'CSS' },\n      { name: 'JQuery' },\n    ],\n    current: ''\n  }\n\n  // Update Course\n  updateCourse = (e) => {\n    this.setState({\n      current: e.target.value\n    })\n  }\n\n  // Add Course\n  addCourse = (e) => {\n    e.preventDefault();\n    if (e.target.name.value === '') {\n      return false\n    } else {\n      let current = this.state.current;\n      let courses = this.state.courses;\n      courses.push({ name: current });\n      this.setState({ courses, current: '' })\n    }\n  }\n\n  // Delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({ courses })\n  }\n\n  // Edit Course\n  editCourse = (index, value) => {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState({ courses })\n  }\n\n  render() {\n    const { courses } = this.state;\n    let length = courses.length\n    const cousreList = length ? (courses.map((course, index) => {\n      return <List details={course} key={index} index={index} deleteCourse={this.deleteCourse} editCourse={this.editCourse} />\n    })) : (<p>there is no item to show</p>)\n\n    return (\n      <section className=\"app\">\n        <h2>Add Course</h2>\n        <Form updateCourse={this.updateCourse} addCourse={this.addCourse} current={this.state.current} />\n        <ul>{cousreList}</ul>\n      </section>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}